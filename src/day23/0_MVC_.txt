[ 소프트웨어 / 프로그램 개발시 사용되는 반복 작업 ]

- MVC 디자인 패턴
    - 목적 : 프로젝트를 구성할때 복잡한 코드와 CLASS파일들을 MVC패턴의 따라 구성하는 방법
        -왜? 협업에서는 다양한 사람들이 동일한 프로젝트를 하면서 서로 다른 코드를 작성 하는데 구분 방법
        - 하나로 파일에서 작성된 코드를 목적/사용에 따라 MVC 구성요소로 분리

    - 장점 : 유지보수, 협업, 단일기능구성( 모듈단위 : 추후에 다른 기능과 커스텀 쉽다. )
         예 ) 완제품 : 피규어 , 모듈제품 : 레고조각
    - 단점 : 클래스/ JAVA파일/ 패키지 등등 파일 구분이 많아서 파일 관리가 어렵다.

        2. 종류
        MVC 패턴
        MVC2 패턴
        MVC2 티어2 패턴
        MVP
    - 구성 종류, 각 구성별로 역할의 책임이 존재한다
    -M 모델   : 데이터 관리 담당
        - dto ( data transfer object = 데이터 이동 객체 )
        - vo ( value object = 값 객체 , setter 함수가 존재하지 않는 읽기 모드 객체 )
        - dao( data access object = 데이터 접근 객체, 주로 데이터베이스접근 객체 )1
    -V 뷰(화면) : 입출력 담당 ( 추후에 html/css/js 프론트엔드 )
        구성 종류, 각 구성별로 역할의 책임이 존재한다
    -C 제어 : model 과 view 사이에서의 제어와 전달 담당
        - view 로 부터 전달 받은 데이터를 model 에게 전달하는 역할
        - 데이터 유효성검사

    5. mvc 패턴과 싱글톤 패턴과 관계
        - view 클래스와 controller 클래스와 do 클래스는 싱글톤을 사용한다. 왜? 3개의 클래스는 정보가 아닌 기능 이므로 1개만 있어도된다.
        - dto는 각 데이터들의 고유한 정보이므로 싱글톤을 사용하지 않는다. 왜? 여러개 정보들은 각각 다른 정보이므로 1개가 아니다.

- 싱글톤 패턴
    - 프로젝트내 하나의 객체만 가질 수 있도록 만드는 패턴
    1. 목적 : 무의미한 객체가 많아지면 객체 관리가 힘들고, 굳이 객체가 많이 필요 없을 때 사용, 즉) 객체가 1개만 필요할 때 사용
    2. 장점 : 객체가 1개이므로 관리가 편하다
    3. 단점 : 메모리 효율성이 좋지 않을 수 있다
    4. 구성 방법
        1. 싱글톤을 만들 클래스에서 현재 클래스의 객체를 생성한다.
        2. 생성자를 외부로부터 차단한ㄷ. 생성자를 private 만든다.
        3. private static 싱글톤 객체를 외부로 부터 접근할 수 있도록 싱글톤 getter함수를 만든다.
            public class 클래스명{
                private static 클래스명 변수명 = new 클래스명();
                private 클래스명(){}
                public static 클래스명 get변수명(){
                    return this.싱글톤변수명;
                }
            }