/* 여러줄 주석 
	[ sql 작성 또는 실행 하는 방법
    1. sql 문법을 작성한다. show databases
    2. sql 문장이 끝나면 ; 으로 마친다
    3. 실행할 명령어 줄에 마우스커서 두고 ctrl enter
		ctrl shift enter 는 전체 실행 
    4. 실행 결과는 하단에 result grid 창에서 확인 가능
*/
# 한줄 주석
-- 한줄 주석
# [1] db server 내 모든 테이블 확인 
show databases;
# [2] db serever local path 확인
show variables like 'datadir';
# [3] db server 데이터베이스 생성
create database myDBtest1;
# [4] db server 데이터베이스 삭제
drop database myDBtest1;
# [ 4-2 ] 만약 데이터 베이스가 존재하면 삭제
drop database if exists myDBtest1;
# [5] db server 에는 여러개 데이터 베이스가 존재하므로 사용 할 활성화 할 데이터베이스 선택
use myDBtest1;

# [ 실습 ]  아래와 같이 순서대로 sql문을 작성하여 실행하시오.
	-- 1. 'test1' 이름의 데이터베이스가 존재하면 삭제하기 sql작성
	-- 2. 'test1' 이름의 데이터베이스 생성하기 sql 작성
    -- 3. 데이터베이스 목록 확인 sql 작성
    -- 4. 로컬 pc에 데이터베이스가 만들어졌는지 경로 확인 sql 작성
    -- 5. 'test1' 이름의 데이터베이스 사용 활성화 하기 sql 작성
    
#1
drop database if exists test1;
#2
create database test1;
#3
show databases;
#4
show variables like 'datadir';
#5
use test1;




# 테이블 생성 과 타입 관련
#  [ 1 ] db 생성
create database mydb1120;
#  [ 2 ] db 활성화 ( 사용 )
use mydb1120;
#  [ 3 ] 활성된 db 내 테이블 생성
create table member( 아이디 text, 패스워드 text, 이름 text );
 # [ 4 ] table 목록 보기
 show tables;
 # [ 5 ] 테이블 삭제
 drop table member;
 drop table if exists member;
 
 /*
	[ 용어 , 관점 차이에 따른 용어 ]
    
    파일시스템관점	모델링관점	관계형관점
    - 파일		엔티티	테이블, 릴레이션
	- 레코드		튜플		행
    - 필드		속성		열
    1. 테이블(table) : 표, 릴레이션(relation), 엔티티(entity)
    2. 레코드(record) : 튜플, 행, 가로 1줄 단위
    3. 필드(field)	: 속성(attribute), 열(column) , 세로 1줄 단위
    
    [ 파일 생성시 필드 타입 = java의 데이터타입 역할이 같다. oracle vs mysql ]
	[ 정수 ]
		tinyint		1byte	-128~127
        smallint	2byte	+-30000
        medioumint	3byte	+-8000000
        int			4byte	+-21억
        bigint		8byte	+-21억이상
	[ 실수 = 부동소수점, 오차 존재 ]
		float	4byte
        double	8byte
	[ 문자타입으로 저장되는 숫자타입, 오차 없는 실수 표현 ]
		decimal
	[ 날짜 ]
		date		날짜 표현, ( 1000년 ~ 9999년 ), 0000-00-00
        datetime	날짜와 시간 표현,	0000-00-00 00:00:00
	[ 문자열 ]
		1. char(문자길이)	: 고정길이, 최대 1~255글자, char(5)	--> "유재석"	-->	[유][재][석][ ][ ] 2칸이 남는다
        2. varchar(문자길이) : 가변길이, 최대 1~255글자, varchar(5) --> "유재석" --> [유][재][석] 남는 칸은 사용 안함
        3. text		: 최대길이 6만개 글자 표현
        4. longtext	: 최대길이 42억개 글자 표현 ( 4gb )
	
    [ 논리 ]
		1. bool		: true 혹인 false 표현, 실제로는 0또는 1로 표현
*/
# 테이블 예제 1

use mydb1120;
#  게시물 테이블 : 게시물의 내용물은 많은 양의 데이터를 저장 할 예정이라서 longtext 타입 선택하고 속성명은 content
#	2. 게시물의 작성자는 아이디이므로 적당한 길이의 초대 30글자로 받을 예정 이라서 varchar(30) 가변길이의 타입 속성 선택하고 속성명은 writer
#	3. 게시물의 비밀번호는 숫자로 받을 예정이라서 적정한 정수 타입의 int 타입 속성 선택하고 속성명은 pwd
create table board( content longtext, writer varchar(30), pwd varchar(30) );
# 테이블의 내용물 / 레코드 확인
select * from board; # 테이블은 존재하지만 아직 데이터가 없다
drop table if exists board; # 테이블 삭제

# 테이블 예제2
drop database if exists mydb1120; # 1. 데이터 베이스가 존재하면 삭제
create database mydb1120;		  # 2. 데이터 베이스 생성
show databases;					  # 3. 데이터 베이스 목록
use mydb1120;					  # 4. 데이터 베이스 활성화
drop table if exists member;	  # 5. 테이블이 존재하면 삭제
create table member(
	정수필드1 tinyint,
    정수필드2 smallint,
    정수필드3 mediumint,
    정수필드4 int,
    정수필드5 bigint,
    실수필드1 float,
    실수필드2 double,
    실수필드3 decimal,
    날짜필드 date,
    날짜시간필드 datetime,
    시간필드 time,
    문자열필드1 char(100),
    문자열필드2 varchar(100),
    문자열필드3 text,
    문자열필드4 longtext,
    논리필드 bool
);	# 6 테이블 생성 : 테이블 명 ( 속성 명 속성 타입 , 속성 명 속성 타입, 속성 명 속성 타입 )
show tables;

select * from member; # 8 지정한 테이블의 레코드 보기	# 현재 레코드가 없고 테이블만 생성된 상태 

# 생각 순서
# 1. 우리가 만들고자 하는 프로글매의 저장할 데이터를 생각,
	# 카테고리 ( 커피 음료 주스 스무디 )
    # 제품 ( 아메리카노 주스 메론스무디 콜라 모카치노 )
    # 주문 ( 102 아메리카노 2개 11/20 , 103 메론스무디 1개 콜라 1개 11/21 )
# 2. 데이터들을 어떻게 관리/구분/처리
	# 카페알바생 - 종이장부
    # 손님1 : 아메리카노 1개 주문 할 때, 어떻게 작성할지? 정답 없음
    # 손님2 : 아메리카노 2개, 메론스무디 2개 주문 했을 때 어떻게 할까?
    
# 3 . ( 정규화 ) 중복을 최소화, 메모리를 효율성있게 아껴 쓸려고
	# 카테고리 테이블 ( 카테고리 명 )
    # 제품테이블 ( 제품명필드, 가격필드 )
    # 주문테이블 ( 주문날짜 )
    # 주문상세테이블 ( 제품명 , 주문수량 )
    
create database mydb1121;
use mydb1121;

create table 카테고리( 카테고리명 char(10) );

create table 제품( 제품명 varchar(10), 가격 int );

create table 주문 ( 주문날짜 date );

create table 주문상세 ( 주문수량 int );

# 4. (관계), 관계형[ 서로 다른 테이블간의 종속] 데이터베이스, 왜? 서로 다른 테이블간의 연결
	 # 카테고리번호( 식별 번호 ) 
create table 카테고리( 카테고리번호pk int, 카테고리명 char(10) ); # 상위테이블
create table 제품 ( 제품번호pk int, 제품명 varchar(50), 가격 int, 카테고리번호fk int ); 		# 하위테이블 # 

create table 주문 ( 주문번호pk int, 주문날짜 date ) ; # 상위 테이블
create table 주문상세( 주문상세번호pk int, 주문번호fk int, 주문수량 int, 제품번호fk int ) ; # 하위 테이블

## 관례적으로 모든 테이블에는 1개이상의 식별데이터/번호가 존재한다. pk 기본키
## pk가 다른 테이블에서 사용참조 한다 . 참조키 fk

# [ 제약 조건 ]
	# 1. not null : 해당 필드에 null 값을 포함하지 않는다
    # 2. default 초기값 : 해당 필드에 레코드(값) 삽입시 비어 있는경우 초기값을 지정한다.
    # 3. unique	: 중복된 값은 허용하지 않는다. [ 중복 제거 ] 레코드 삽입 시 데이터가 중복이면 오류 발생
    # 4. auto_increament : 해당 필드에 레코드 삽입시 순서대로 번호가 자동 삽입된다.
    # 5. primary key : 테이블의 식별필드, ( 기본키 - pk ), 식별 가능한 고유 값을 가진 키, 참조 당하는 키
		# primary key( pk 필드명 )
    # 6. foreign key : 테이블의 참조필드, ( 참조키 - fk ), 다른 테이블내 기본키를 참조하는 키, 참조하는 키
		# foreign key( fk 필드명 ) reference ( fk 필드명 )
    # 관례적으로 모든 테이블은 1개 이상의 pk필드를 가진다.
# 회원제 게시판 ( 회원테이블 , 게시판테이블 = 종속 관계 파악, 회원이 게시물을 작성하는지 vs 게시물이 회원을 작성하는지)    
create table 회원테이블(
	회원번호pk int unsigned not null auto_increment,			-- 회원번호는 일반적으로 가입순서대로 1~ 저장하기 위해서 int 사용했다.
															-- unsigned : [ 부호가 없다 뜻 ] int ( +- 21억 ) int unsigned ( 42억 )
    아이디 varchar(30) unique,								-- 아이디는 최대 30글자만 입력받을 예정이라서 varchar(30) 사용했다.
    비밀번호 varchar(20),										-- 비밀번호는 최대 20글자만 입력받을 예정이라서 varchar(20) 사용했다.
    연락처 char(13),											-- 010-1234-1234 형식으로 저장 할 예정 이라서 char(13) 사용했다.
    광고전송여부 boolean,										-- true, false 형식으로 저장 할 예정이라서 boolean 사용했다.
    가입일 datetime,											-- 2024-11-21 20:25:11 형식으로 저장 할 예정 이라서 datetime 사용했다.
    primary key(회원번호pk)										-- 지정한 필드를 pk로 사용하겠다
    -- 아이디 대신에 회원번호로 사용한 이유는?	1. 용량이 작다	2. 중복배제 ( 유재석이 qwe 아이디로 회원탈퇴하고 5년후 강호동이 qwe 아이디로 가입했다. )
    -- 유재석과 강호동은 같은 회원인가?? 아니요.

); # 임의 테이블 생성 ,create table 테이블명( 필드명 타입, 필드명 타입 );
create table 게시물테이블(
	게시물번호 int unsigned not null auto_increment,		-- 게시물 번호는 일반적으로 작성순서대로 1~ 저장하기 때문에 int unsigned 했다.
    게시물번호 varchar(10),								-- 게시물 제목은 적당하게 최대 100글자로 하기 위해서 varchar100 했다.
    게시물내용 longtext,									-- 게시물 내용은 많은 데이터를 저장하기위해서 큰 용량인(4g) longtext 했다
    게시물작성자회원번호 int,									-- 게시물작성자가 아이디가 아니고 회원번호인 이유는 : 회원번호를 통해 아이디
		-- 예 ] 동사무소에 가면 주민등록번호[식별키]만 말해도 내 신상정보를 직원이 볼 수 있어.
	foreign key( 게시물작성자회원번호fk ) references 회원테이블( 회원번호pk ),
    primary key( 게시물번호 )
);

/* 
	[ sql 과제2 ] 회원들만 구매할 수 있는 '라면' 쇼핑물, 데이터 베이스 구축하기
		- 요구사항
			1. 회원은 회원가입을 진행한다. ( 임의 )
            2. 로그인된 상황에서 카테고리를 선택한다.
            3. 지정된 카테고리에서 제품을 선택한다.
            4. 지정한 제품을 장바구니에 담는다.
            -- > 여러번 장바구니에 담았을 때
            5. 만약에 장바구니에 담긴 ' 불닭볶음면 ' 2개 , 짜파게티 1개를 주문 했다.
            6. 하나의 주문 번호를 발급 받았고 주문 내역에서 지정한 주문상세를 클릭시 주문한 상세 내역(정보) 나왔다.
*/

    